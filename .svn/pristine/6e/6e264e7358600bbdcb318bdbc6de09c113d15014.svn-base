//
//  MSALandingPageViewController.m
//  MySchapp
//
//  Created by CK-Dev on 23/02/16.
//  Copyright Â© 2016 ACA. All rights reserved.
//

#import "MSALandingPageViewController.h"
#import "MSASplashViewController.h"
#import "MSAConstants.h"
#import "MSALoginViewController.h"
#import "MSASignupViewController.h"

#define xGap 10

@interface MSALandingPageViewController ()<LoginSignupDismissHandler>
{
    UIView *navView;
    UIView *midView;
    UIView *loginSignupView;
    UIView *menuView;
    iCarousel *categoryView;
    NSLayoutConstraint *menuBtnConstraint;
    UIView *navMenuView;
    UITableView *menuList;
    NSMutableArray *menuItems;
    NSMutableArray *tableItems;
    UIButton *backButton;
}

@property (nonatomic, strong) NSMutableArray *categories;

- (IBAction)loginClicked:(id)sender;
- (IBAction)signupClicked:(id)sender;

@end

@implementation MSALandingPageViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    self.categories = [[NSMutableArray alloc] initWithArray:@[@{@"name":@"Healthcare",@"icon":@"icon_health1.png"},@{@"name":@"Home Services",@"icon":@"icon_homeServices1.png"},@{@"name":@"Travel",@"icon":@"icon_travel1.png"}]];
    [self designLandingPage];
    //[self designMenu];
    menuItems = [[NSMutableArray alloc] initWithArray:@[@{@"name":@"abc",@"subItems":@[]},@{@"name":@"def",@"subItems":@[@{@"name":@"ghi"},@{@"name":@"jkl"},@{@"name":@"mno"}]}]];
    tableItems = menuItems;
     
}
- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    self.navigationController.navigationBarHidden = YES;
    self.navigationItem.hidesBackButton = YES;
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)designMenu
{
    if(!menuView)
    {
        menuView = [[UIView alloc] init];
        menuView.backgroundColor = [UIColor blackColor];
        menuView.translatesAutoresizingMaskIntoConstraints = NO;
        [self.view addSubview:menuView];
        //[self.view sendSubviewToBack:menuView];
        [self.view addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|[menu]|" options:0 metrics:nil views:@{@"menu":menuView}]];
        [self.view addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:|[menu]|" options:0 metrics:nil views:@{@"menu":menuView}]];
        
//        UITapGestureRecognizer *menuViewTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(removeMenuView:)];
//        [menuView addGestureRecognizer:menuViewTap];
        
        navMenuView = [[UIView alloc] init];
        navMenuView.backgroundColor = [UIColor blueColor];
        navMenuView.translatesAutoresizingMaskIntoConstraints = NO;
        [menuView addSubview:navMenuView];
        [menuView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|[navMenu(200)]|" options:0 metrics:nil views:@{@"navMenu":navMenuView}]];
        
        backButton = [UIButton buttonWithType:UIButtonTypeRoundedRect];
        backButton.translatesAutoresizingMaskIntoConstraints = NO;
        [backButton setTitle:@"Back" forState:UIControlStateNormal];
        [navMenuView addSubview:backButton];
        [backButton addTarget:self action:@selector(goBackFromSubMenu:) forControlEvents:UIControlEventTouchUpInside];
        [navMenuView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|[back(80)]|" options:0 metrics:nil views:@{@"back":backButton}]];
        [navMenuView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:|[back]|" options:0 metrics:nil views:@{@"back":backButton}]];
        
        menuList = [[UITableView alloc] init];
        menuList.dataSource = self;
        menuList.delegate = self;
        menuList.translatesAutoresizingMaskIntoConstraints = NO;
        [menuView addSubview:menuList];
        [menuView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|[menuList(200)]|" options:0 metrics:nil views:@{@"menuList":menuList}]];
        [menuView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:|[navMenu(44)][menuList]|" options:0 metrics:nil views:@{@"menuList":menuList,@"navMenu":navMenuView}]];
    }
    else
    {
        [menuView removeFromSuperview];
        menuView = nil;
    }
}

- (void)goBackFromSubMenu:(id)sender
{
    tableItems = menuItems;
    [menuList reloadData];
    backButton.hidden = YES;
}

- (void)removeMenuView:(id)sender
{
//    [menuView removeFromSuperview];
//    menuView = nil;
}

- (void)designLandingPage
{
    navView = [[UIView alloc] init];
    navView.translatesAutoresizingMaskIntoConstraints = NO;
    midView = [[UIView alloc] init];
    midView.translatesAutoresizingMaskIntoConstraints = NO;
    loginSignupView = [[UIView alloc] init];
    loginSignupView.backgroundColor = [UIColor grayColor];
    loginSignupView.translatesAutoresizingMaskIntoConstraints = NO;
    
    [self.view addSubview:navView];
    [self.view addSubview:midView];
    [self.view addSubview:loginSignupView];
    
    [self.view addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|[navView]|" options:0 metrics:nil views:@{@"navView":navView}]];
    [self.view addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|[midView]|" options:0 metrics:nil views:@{@"midView":midView}]];
    [self.view addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|[loginSignupView]|" options:0 metrics:nil views:@{@"loginSignupView":loginSignupView}]];
    [self.view addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:|-20-[navView(44)][midView][loginSignupView(80)]|" options:0 metrics:nil views:@{@"navView":navView,@"midView":midView,@"loginSignupView":loginSignupView}]];
    
    [self designNavigationView];
    [self designMiddleView];
    [self designLoginSignupView];
}
- (void)designNavigationView
{
    UIButton *drawerBtn = [UIButton buttonWithType:UIButtonTypeRoundedRect];
    drawerBtn.translatesAutoresizingMaskIntoConstraints = NO;
    [drawerBtn setTitle:@"Menu" forState:UIControlStateNormal];
    [drawerBtn setBackgroundImage:[UIImage imageNamed:@"close.png"] forState:UIControlStateNormal];
    [drawerBtn addTarget:self action:@selector(menuClicked:) forControlEvents:UIControlEventTouchUpInside];
    [navView addSubview:drawerBtn];
    UIImageView *iconImage = [[UIImageView alloc] init];
    iconImage.translatesAutoresizingMaskIntoConstraints = NO;
    iconImage.image = [UIImage imageNamed:@"close.png"];
    [navView addSubview:iconImage];
    UISearchBar *navSearchBar = [[UISearchBar alloc] init];
    navSearchBar.translatesAutoresizingMaskIntoConstraints = NO;
    navSearchBar.placeholder = @"Search within 10 miles";
    [navView addSubview:navSearchBar];
    menuBtnConstraint = [NSLayoutConstraint constraintWithItem:drawerBtn attribute:NSLayoutAttributeWidth relatedBy:NSLayoutRelationEqual toItem:navView attribute:NSLayoutAttributeWidth multiplier:0 constant:30];
    [self.view addConstraint:menuBtnConstraint];
    [navView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|[drawerBtn]-10-[iconImage(30)]-5-[searchBar]|" options:0 metrics:nil views:@{@"drawerBtn":drawerBtn,@"searchBar":navSearchBar,@"iconImage":iconImage}]];
    [navView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:|[drawerBtn]|" options:0 metrics:nil views:@{@"drawerBtn":drawerBtn}]];
    [navView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:|[iconImage]|" options:0 metrics:nil views:@{@"iconImage":iconImage}]];
    [navView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:|[searchBar]|" options:0 metrics:nil views:@{@"searchBar":navSearchBar}]];
    
}
- (void)designMiddleView
{
    //label
    UILabel *infoLabel = [[UILabel alloc] init];
    infoLabel.text = @"Find the time to book your appointment for the service you are looking for.";
    infoLabel.numberOfLines = 2;
    infoLabel.textAlignment = NSTextAlignmentCenter;
    infoLabel.translatesAutoresizingMaskIntoConstraints = NO;
    [midView addSubview:infoLabel];
    //image
    UIImageView *infoImg = [[UIImageView alloc] init];
    infoImg.image = [UIImage imageNamed:@"close.png"];
    infoImg.translatesAutoresizingMaskIntoConstraints = NO;
    [midView addSubview:infoImg];
    //carousel
    categoryView = [[iCarousel alloc] init];
    
    categoryView.dataSource = self;
    categoryView.delegate = self;
    categoryView.backgroundColor = [UIColor grayColor];
    categoryView.translatesAutoresizingMaskIntoConstraints = NO;
    [midView addSubview:categoryView];
    //label
    UILabel *distanceLabel = [[UILabel alloc] init];
    distanceLabel.text = @"Search with in";
    distanceLabel.translatesAutoresizingMaskIntoConstraints = NO;
    [midView addSubview:distanceLabel];
    //textfield
    UIPickerView *distanceInputView = [[UIPickerView alloc] init];
    distanceInputView.dataSource = self;
    distanceInputView.delegate = self;
    UITextField *distanceField = [[UITextField alloc] init];
    distanceField.text = @" 10 Miles";
    distanceField.layer.borderWidth = 1;
    distanceField.layer.cornerRadius = 10;
    distanceField.inputView = distanceInputView;
    distanceField.translatesAutoresizingMaskIntoConstraints = NO;
    [midView addSubview:distanceField];
    //label
    UILabel *locationLabel = [[UILabel alloc] init];
    locationLabel.text = @"of location";
    locationLabel.textAlignment = NSTextAlignmentCenter;
    locationLabel.translatesAutoresizingMaskIntoConstraints = NO;
    [midView addSubview:locationLabel];
    //button
    UIButton *searchButton = [UIButton buttonWithType:UIButtonTypeRoundedRect];
    searchButton.backgroundColor = [UIColor blueColor];
    searchButton.titleLabel.textColor = [UIColor whiteColor];
    [searchButton setTitle:@"Search" forState:UIControlStateNormal];
    searchButton.translatesAutoresizingMaskIntoConstraints = NO;
    [midView addSubview:searchButton];
    
    [midView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:[NSString stringWithFormat:@"H:|-%f-[infoLabel]-%f-|",self.view.frame.size.width*0.05,self.view.frame.size.width*0.05] options:0 metrics:nil views:@{@"infoLabel":infoLabel}]];
    [midView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|[infoImg]|" options:0 metrics:nil views:@{@"infoImg":infoImg}]];
    [midView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|[category]|" options:0 metrics:nil views:@{@"category":categoryView}]];
    [midView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:[NSString stringWithFormat:@"H:|-%f-[distanceLabel]-%f-|",self.view.frame.size.width*0.05,self.view.frame.size.width*0.05] options:0 metrics:nil views:@{@"distanceLabel":distanceLabel}]];
    [midView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:[NSString stringWithFormat:@"H:|-%f-[distanceField]-%f-|",self.view.frame.size.width*0.05,self.view.frame.size.width*0.05] options:0 metrics:nil views:@{@"distanceField":distanceField}]];
    [midView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|[locationLabel]|" options:0 metrics:nil views:@{@"locationLabel":locationLabel}]];
    [midView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:[NSString stringWithFormat:@"H:|-%f-[searchButton]-%f-|",self.view.frame.size.width*0.05,self.view.frame.size.width*0.05] options:0 metrics:nil views:@{@"searchButton":searchButton}]];
    [midView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:|[infoLabel(70)]-5-[infoImg(70)]-5-[category(130)]-20-[distanceLabel(20)]-5-[distanceField(50)]-15-[locationLabel(30)]-10-[searchButton(30)]" options:0 metrics:nil views:@{@"infoLabel":infoLabel,@"infoImg":infoImg,@"category":categoryView,@"distanceLabel":distanceLabel,@"distanceField":distanceField,@"locationLabel":locationLabel,@"searchButton":searchButton}]];
    
}
- (void)designLoginSignupView
{
    UIButton *loginButton = [UIButton buttonWithType:UIButtonTypeRoundedRect];
    [loginButton setTitle:@"Login" forState:UIControlStateNormal];
    loginButton.translatesAutoresizingMaskIntoConstraints = NO;
    [loginButton addTarget:self action:@selector(loginClicked:) forControlEvents:UIControlEventTouchUpInside];
    [loginSignupView addSubview:loginButton];
    UIButton *signupButton = [UIButton buttonWithType:UIButtonTypeRoundedRect];
    [signupButton setTitle:@"Signup" forState:UIControlStateNormal];
    signupButton.translatesAutoresizingMaskIntoConstraints = NO;
    [signupButton addTarget:self action:@selector(signupClicked:) forControlEvents:UIControlEventTouchUpInside];
    [loginSignupView addSubview:signupButton];
    [loginSignupView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|-[login(80)]-(>=10)-[signup(80)]-|" options:0 metrics:nil views:@{@"login":loginButton,@"signup":signupButton}]];
    [loginSignupView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:|-10-[login(45)]" options:0 metrics:nil views:@{@"login":loginButton}]];
    [loginSignupView addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:|-10-[signup(45)]" options:0 metrics:nil views:@{@"signup":signupButton}]];
}

#pragma mark - UIPickerViewDatasource

-(NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView
{
    return 1;
}

- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component
{
    return 3;
}

- (NSString *)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component
{
    return @"name";
}

#pragma mark - UIPickerViewDelegate

-(void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component
{
    
}

#pragma mark - UITableViewDatasource

-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    return 1;
}

-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return [tableItems count];
}

-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString *CellIdentifier = @"MSAComparePlanTableViewCell";
    
    UITableViewCell *cell = (UITableViewCell*)[tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
        cell.selectionStyle = UITableViewCellSelectionStyleNone;
    }
    
    cell.textLabel.text = [[tableItems objectAtIndex:indexPath.row] valueForKey:@"name"];
    return cell;
}

#pragma mark - UITableViewDelegate

-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSArray *subItems = [[menuItems objectAtIndex:indexPath.row] valueForKey:@"subItems"];
    if([subItems count] > 0)
    {
        tableItems = subItems;
        [menuList reloadData];
        backButton.hidden = NO;
    }
    else
    {
        //open the related page
    }
}

#pragma mark - iCarousel methods

- (NSInteger)numberOfItemsInCarousel:(iCarousel *)carousel
{
    return self.categories.count;
}

- (UIView *)carousel:(iCarousel *)carousel viewForItemAtIndex:(NSInteger)index reusingView:(UIView *)view
{
    NSDictionary *detail = [self.categories objectAtIndex:index];
    NSString *image = [detail valueForKey:@"icon"];
    NSString *title = [detail valueForKey:@"name"];
    
    UIView *itemView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width/5+2*xGap, categoryView.frame.size.height)];
    
    UIImageView *itemImageView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 5, self.view.frame.size.width/5, categoryView.frame.size.height-50-5*2)];
    UIImage *itemImage = [UIImage imageNamed:image];
    itemImageView.image = itemImage;
    itemImageView.userInteractionEnabled = YES;
    [itemView addSubview:itemImageView];
    
    UILabel *aLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, categoryView.frame.size.height-50, self.view.frame.size.width/5, 50)];
    aLabel.backgroundColor = [UIColor clearColor];
    aLabel.textColor = [UIColor whiteColor];
    aLabel.textAlignment = NSTextAlignmentCenter;
    aLabel.text = title;
    aLabel.numberOfLines = 2;
    aLabel.font = [UIFont fontWithName:@"Helvetica" size:15];
    [itemView addSubview:aLabel];
    
    return itemView;
    
}

- (void)carouselWillBeginDragging:(iCarousel *)carousel
{
    // DLog(@"Carousel will begin dragging");
    
}

- (void)carouselDidEndDragging:(iCarousel *)carousel willDecelerate:(BOOL)decelerate
{
    //DLog(@"Carousel did end dragging and %@ decelerate", decelerate? @"will": @"won't");
}

- (void)carouselWillBeginDecelerating:(iCarousel *)carousel
{
    //DLog(@"Carousel will begin decelerating");
}

- (void)carouselDidEndDecelerating:(iCarousel *)carousel
{
    // DLog(@"Carousel did end decelerating");
}

- (void)carouselWillBeginScrollingAnimation:(iCarousel *)carousel
{
    //DLog(@"Carousel will begin scrolling");
}

//- (void)carouselDidEndScrollingAnimation:(iCarousel *)carousel
//{
//    // DLog(@"Carousel did end scrolling%ld",(long)carousel.currentItemIndex);
//    // Update the page control
//    self.pageControl.currentPage = [self.carousel currentItemIndex];
//    
//}

- (BOOL)carousel:(iCarousel *)carousel shouldSelectItemAtIndex:(NSInteger)index
{
    if (index == carousel.currentItemIndex)
    {
        // DLog(@"Should select current item");
    }
    else
    {
        //DLog(@"Should select item number %li", (long)index);
    }
    return YES;
}

- (void)carousel:(iCarousel *)carousel didSelectItemAtIndex:(NSInteger)index
{
    //NSDictionary *detail = [self.categories objectAtIndex:index];
    //navigate to the sub category
}

- (CGFloat)carousel:(iCarousel *)_carousel valueForOption:(iCarouselOption)option withDefault:(CGFloat)value
{
    //customize carousel display
    switch (option)
    {
        case iCarouselOptionWrap:
        {
            //normally you would hard-code this to YES or NO
            return YES;
        }
        default:
        {
            return value;
        }
    }
}


#pragma mark - IBAction
- (IBAction)loginClicked:(id)sender {
    
    UIStoryboard *mainStoryboard = UISTORYBOARD;
    MSALoginViewController *controller = (MSALoginViewController*)[mainStoryboard
                                                                      instantiateViewControllerWithIdentifier: @"LoginViewController"];
    
    controller.loginDelegate = self;
    UINavigationController *navLoginController = [[UINavigationController alloc] initWithRootViewController:controller];
    [self presentViewController:navLoginController animated:YES completion:nil];
    
    
}

- (IBAction)signupClicked:(id)sender {
    
    UIStoryboard *mainStoryboard = UISTORYBOARD;
    
    
    MSASignupViewController *controller = (MSASignupViewController*)[mainStoryboard
                                                                     instantiateViewControllerWithIdentifier: @"SignupViewController"];
    
    controller.signupDelegate = self;
    UINavigationController *navSignupController = [[UINavigationController alloc] initWithRootViewController:controller];
    [self presentViewController:navSignupController animated:YES completion:nil];

}

- (void)menuClicked:(id)sender
{
    [self designMenu];
    backButton.hidden = YES;
}

-(void)controllerGotDissmissed:(UIViewController *)controller {
    if ([controller isKindOfClass:[MSALoginViewController class]]) {
        [controller dismissViewControllerAnimated:NO completion:nil];
        [self signupClicked:nil];
    }
    else if ([controller isKindOfClass:[MSASignupViewController class]]) {
        [controller dismissViewControllerAnimated:NO completion:nil];
        [self loginClicked:nil];
    }
    
    
}

@end
