//
//  MSACountrySelectViewController.m
//  MySchapp
//
//  Created by CK-Dev on 10/03/16.
//  Copyright Â© 2016 ACA. All rights reserved.
//

#import "MSACountrySelectViewController.h"
#import "MSAPlanViewContoller.h"
#import "MSAConstants.h"
#import "MSANetworkHandler.h"
#import "MSALoginDecision.h"

@interface MSACountrySelectViewController()<MSANetworkDelegate>
{
    NSUserDefaults *userDefaults;
    NSInteger selectedIndex;
}
@end

@implementation MSACountrySelectViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view, typically from a nib.
    
    userDefaults = [NSUserDefaults standardUserDefaults];
    NSLog(@"%@", [userDefaults valueForKey:kDefaultsAccessTokenType]);
    NSLog(@"%@", [userDefaults valueForKey:kDefaultsRefreshToken]);
    NSLog(@"%@", [userDefaults valueForKey:kDefaultsAccessToken]);
    NSLog(@"%@", [userDefaults valueForKey:kDefaultsAccessTokenExpiresIn]);
    NSLog(@"%@", [userDefaults valueForKey:kDefaultsRefreshTokenExpiresIn]);
    NSLog(@"%@", [userDefaults valueForKey:kDefaultsAccessTokenReceivedTime]);
    NSLog(@"%@", [userDefaults valueForKey:kDefaultsRefreshTokenReceivedTime]);
    
    UIPickerView *countryPicker = [[UIPickerView alloc] init];
    countryPicker.dataSource = self;
    countryPicker.delegate = self;
    UIToolbar *toolBar= [[UIToolbar alloc] initWithFrame:CGRectMake(0,0,[UIScreen mainScreen].bounds.size.width,44)];
    [toolBar setBarStyle:UIBarStyleBlackOpaque];
    UIBarButtonItem *barButtonDone = [[UIBarButtonItem alloc] initWithTitle:@"Done"
                                                                      style:UIBarButtonItemStyleBordered target:self action:@selector(setCountryName:)];
    UIBarButtonItem *barButtonCancel = [[UIBarButtonItem alloc] initWithTitle:@"Cancel"
                                                                      style:UIBarButtonItemStyleBordered target:self action:@selector(resetCountryName:)];
    UIBarButtonItem *flex = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:self action:nil];
    
    toolBar.items = @[barButtonCancel,flex,barButtonDone];
    barButtonDone.tintColor=[UIColor blackColor];
    self.countryField.inputAccessoryView = toolBar;
    self.countryField.delegate = self;
    self.countryField.inputView = countryPicker;
    
}

- (void)setCountryName:(id)sender
{
    self.countryField.text = [[self.countryList objectAtIndex:selectedIndex] valueForKey:@"name"];
    [self.countryField resignFirstResponder];
}

- (void)resetCountryName:(id)sender
{
    [self.countryField resignFirstResponder];
}

-(BOOL)isValidRefreshToken {
    NSNumber *expireTimeInterval = [userDefaults valueForKey:kDefaultsRefreshTokenExpiresIn];
    NSDate *refeshTokenReceiveTime = [userDefaults valueForKey:kDefaultsRefreshTokenReceivedTime];
    
    NSDate *currentDateTime = [NSDate date];
    NSDate *newDate = [refeshTokenReceiveTime dateByAddingTimeInterval:[expireTimeInterval doubleValue]];
    if ([currentDateTime compare:newDate]== NSOrderedAscending) {
        // Not Expired
        return YES;
    }
    return NO;
    
    
}


-(BOOL)isValidAccessToken {
    NSNumber *expireTimeInterval = [userDefaults valueForKey:kDefaultsAccessTokenExpiresIn];
    NSDate *accessTokenReceiveTime = [userDefaults valueForKey:kDefaultsAccessTokenReceivedTime];
    
    NSDate *currentDateTime = [NSDate date];
    NSDate *newDate = [accessTokenReceiveTime dateByAddingTimeInterval:[expireTimeInterval doubleValue]];
    if ([currentDateTime compare:newDate]== NSOrderedAscending) {
        // Not Expired
        return NO;
    }
    return NO;
    

}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}


- (IBAction)continueClicked:(id)sender {
    
    
    MSALoginDecision *loginDecision = [[MSALoginDecision alloc] init];
    loginDecision.delegate = self;
    [loginDecision checkLoginCriteria];
}

#pragma mark - MSANetworkDelegate

- (void)didReceiveData:(NSData *)responseData forRequest:(NSString *)requestId
{
    //received response comes here
    NSError* err;
    NSDictionary *responseDict = [NSJSONSerialization JSONObjectWithData:responseData options:0 error:&err];
    
    NSLog(@"%@",responseDict);
    
    
    
}

- (void)didFailWithError:(NSError *)error forRequest:(NSString *)requestId
{
    
}

#pragma mark - UIPickerViewDatasource

-(NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView
{
    return 1;
}

- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component
{
    return self.countryList.count;
}

- (NSString *)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component
{
    return [[self.countryList objectAtIndex:row] valueForKey:@"name"];
}

#pragma mark - UIPickerViewDelegate

-(void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component
{
    selectedIndex = row;
}

#pragma mark - UITextField

//- (BOOL)textFieldShouldBeginEditing:(UITextField *)textField
//{
//    return NO;
//}

#pragma LoginDecision Delegate
- (void)redirectToPage:(NSString *)pageToBeOpened {
    NSString *selectedCountryCode = [[self.countryList objectAtIndex:selectedIndex] valueForKey:@"countrycodeid"];
    UIStoryboard *mainStoryboard = UISTORYBOARD;
    MSAPlanViewContoller *controller = (MSAPlanViewContoller*)[mainStoryboard
                                                               instantiateViewControllerWithIdentifier: @"PlanViewContoller"];
    controller.selectedCountryId = selectedCountryCode;
    [self.navigationController pushViewController:controller animated:YES];
}



@end
