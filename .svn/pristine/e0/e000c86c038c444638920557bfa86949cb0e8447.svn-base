//
//  MSASecurityViewController.m
//  MySchapp
//
//  Created by CK-Dev on 25/03/16.
//  Copyright Â© 2016 ACA. All rights reserved.
//

#import "MSASecurityViewController.h"
#import "MSAConstants.h"
#import "MSANetworkHandler.h"
#import "MSAUtils.h"
#import "MSAQuestionsTableViewController.h"
#import "MSANotificationViewController.h"
#import "MSALoginDecision.h"

@interface MSASecurityViewController ()<MSANetworkDelegate,LoginDecisionDelegate>
{
    NSMutableDictionary *securityData;
    NSMutableDictionary *securityDataToSend;
    
    __weak IBOutlet UIView *resetPasswordView;
    __weak IBOutlet UITextField *reenterPassTxt;
    __weak IBOutlet UITextField *passwordTxt;
    __weak IBOutlet NSLayoutConstraint *passwordViewHeight;
    __weak IBOutlet UIView *questionView1;
    __weak IBOutlet UIView *questionView2;
    __weak IBOutlet UIView *questionView3;
    __weak IBOutlet UILabel *question1Lbl;
    __weak IBOutlet UILabel *question2Lbl;
    __weak IBOutlet UILabel *question3Lbl;
    __weak IBOutlet UITextField *answerQuest1Txt;
    __weak IBOutlet UITextField *answerQuest2Txt;
    __weak IBOutlet UITextField *answerQuest3Txt;
    __weak IBOutlet UIButton *privacyBtn;
    __weak IBOutlet UIButton *disableAccBtn;
}
- (IBAction)diasbleAccountClicked:(id)sender;
- (IBAction)privacyClicked:(id)sender;
- (IBAction)skipContinue:(id)sender;
- (IBAction)continueToNotification:(id)sender;
@end

@implementation MSASecurityViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    self.navigationController.navigationBarHidden = NO;
    self.navigationItem.title = @"Security";
    
    NSString *urlString = [NSString stringWithFormat:@"%@",[NSString stringWithFormat:@"%@%@",BASEURL,SECURITYURL]];
    MSANetworkHandler *networkHanlder = [[MSANetworkHandler alloc] init];
    networkHanlder.delegate = self;
    NSDictionary *reqHeadDict = @{@"Authorization":[NSString stringWithFormat:@"bearer %@",[[NSUserDefaults standardUserDefaults] valueForKey:kAccessToken]]};
    [networkHanlder createRequestForURLString:urlString withIdentifier:@"Security" requestHeaders:reqHeadDict andRequestParameters:self.personalData inView:self.view];
   
    [self updateUI];
    [self autoFillData];
    
}

-(void)updateUI {
    if (!self.resetPasswordEnabled) {
        resetPasswordView.clipsToBounds = YES;
        passwordViewHeight.constant = 0;
        [self.view updateConstraintsIfNeeded];
    }
    
    UITapGestureRecognizer *question1Tap = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(questionsTapped:)];
    questionView1.tag = 101;
    [questionView1 addGestureRecognizer:question1Tap];
    
    UITapGestureRecognizer *question2Tap = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(questionsTapped:)];
    [questionView2 addGestureRecognizer:question2Tap];
    questionView2.tag = 102;
    
    UITapGestureRecognizer *question3Tap = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(questionsTapped:)];
    [questionView3 addGestureRecognizer:question3Tap];
    questionView3.tag = 103;
    
}

-(void)autoFillData {
    if (![[MSAUtils convertNullToEmptyString:[securityData objectForKey:@"q1"]]isEqualToString:@""] && [[MSAUtils convertNullToEmptyString:[securityData objectForKey:@"q1"]]isEqualToString:@""]) {
        question1Lbl.text = [MSAUtils convertNullToEmptyString:[securityData objectForKey:@"q1"]];
    }
    if (![[MSAUtils convertNullToEmptyString:[securityData objectForKey:@"q2"]]isEqualToString:@""] && [[MSAUtils convertNullToEmptyString:[securityData objectForKey:@"q2"]]isEqualToString:@""]) {
        question2Lbl.text = [MSAUtils convertNullToEmptyString:[securityData objectForKey:@"q2"]];
    }
    if (![[MSAUtils convertNullToEmptyString:[securityData objectForKey:@"q3"]]isEqualToString:@""] && [[MSAUtils convertNullToEmptyString:[securityData objectForKey:@"q3"]]isEqualToString:@""]) {
        question3Lbl.text = [MSAUtils convertNullToEmptyString:[securityData objectForKey:@"q3"]];
    }
    
}

-(void)getFilledData {
    
    // Validity check here
    
    securityDataToSend = [[NSMutableDictionary alloc ]init];
    [securityDataToSend setObject:question1Lbl.text forKey:@"q1"];
    [securityDataToSend setObject:question2Lbl.text forKey:@"q2"];
    [securityDataToSend setObject:question3Lbl.text forKey:@"q3"];
    [securityDataToSend setObject:answerQuest1Txt.text forKey:@"ans1"];
    [securityDataToSend setObject:answerQuest2Txt.text forKey:@"ans2"];
    [securityDataToSend setObject:answerQuest3Txt.text forKey:@"ans3"];
    
     if (!self.resetPasswordEnabled) {
         [securityDataToSend setObject:passwordTxt.text forKey:@"pwd"];
         [securityDataToSend setObject:reenterPassTxt.text forKey:@"cpwd"];
     }
}


- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}


#pragma mark - MSANetworkDelegate

- (void)didReceiveData:(NSData *)responseData forRequest:(NSString *)requestId
{
    //received response comes here
    NSError* err;
    NSDictionary *responseDict = [NSJSONSerialization JSONObjectWithData:responseData options:0 error:&err];
    
    NSLog(@"%@",responseDict);
    if([[responseDict valueForKey:@"rCode"] isEqualToString:@"00"]) {
        NSLog(@"Got security Data");
        securityData = [NSMutableDictionary dictionaryWithDictionary:responseDict];
    }
    else {
        [MSAUtils showAlertWithTitle:kAlertMessageTitle message:[responseDict valueForKey:@"rMsg"] cancelButton:kAlertOkButtonTitle otherButton:nil delegate:self];
    }
    
}

-(void)didFailWithError:(NSError *)error forRequest:(NSString *)requestId
{
    [MSAUtils showAlertWithTitle:kAlertMessageTitle message:kAlertInternalErrorMsg cancelButton:kAlertOkButtonTitle otherButton:nil delegate:self];
}


#pragma mark - Action Methods

- (IBAction)diasbleAccountClicked:(id)sender {
}

- (IBAction)privacyClicked:(id)sender {
}

- (IBAction)skipContinue:(id)sender {
    
    [self dismissViewControllerAnimated:YES completion:nil];
}

- (IBAction)continueToNotification:(id)sender {
    [self getFilledData];
    MSALoginDecision *loginDecision = [[MSALoginDecision alloc]init];
    loginDecision.delegate = self;
    [loginDecision checkLoginCriteria];
    
}

#pragma mark selector methods
-(void)questionsTapped:(id)sender {
    UIView * tappedView = [sender view];
    MSAQuestionsTableViewController *questions = [[MSAQuestionsTableViewController alloc]init];
    questions.tappedViewTag = tappedView.tag;
    questions.questionList = [securityData objectForKey:@"listOfQuestions"];
    questions.delegate = self;
    [self.navigationController pushViewController:questions animated:YES];
    
}



#pragma mark - SelectedQuestionDelegate Method
-(void)selectedQuestion:(NSString *)questionText withViewTag:(NSInteger)tag {
    
    if (tag == 101) {
        question1Lbl.text = questionText;
    }
    else if (tag == 102) {
        question2Lbl.text = questionText;
    }
    else {
        question3Lbl.text = questionText;
    }
}

#pragma LoginDecision Delegate
- (void)redirectToPage:(NSString *)pageToBeOpened {
    if ([pageToBeOpened isEqualToString:kLoginScreen]) {
        [self.navigationController popToRootViewControllerAnimated:NO];
        
    }
    else if ([pageToBeOpened isEqualToString:kCountrySelectionScreen])
    {
        UIStoryboard *mainStoryboard = UISTORYBOARD;
        
        MSANotificationViewController *controller = (MSANotificationViewController*)[mainStoryboard
                                                                             instantiateViewControllerWithIdentifier:@"MSANotificationViewController"];
        
        controller.securityData = securityDataToSend;
        [self.navigationController pushViewController:controller animated:YES];
    }
}

@end
