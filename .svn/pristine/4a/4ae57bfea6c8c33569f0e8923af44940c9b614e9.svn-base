//
//  MSALoginDecision.m
//  MySchapp
//
//  Created by CK-Dev on 3/17/16.
//  Copyright Â© 2016 ACA. All rights reserved.
//

#import "MSALoginDecision.h"
#import "MSAUtils.h"
#import "MSAConstants.h"

@implementation MSALoginDecision

- (void)checkLoginCriteriaWhileLaunching
{
    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
    if([userDefaults valueForKey:kRefreshToken])
    {
        //refresh token available
        if([self isValidRefreshToken])
        {
            //open landing page without login and signup options.
            if([self.delegate respondsToSelector:@selector(redirectToPage:)])
                [self.delegate redirectToPage:@"LandingPageWithoutLoginSignup"];
        }
        else
        {
            //open landing page with login and signup options
            if([self.delegate respondsToSelector:@selector(redirectToPage:)])
                [self.delegate redirectToPage:@"LandingPageWithLoginSignup"];
        }
    }
    else    //refresh token not available
    {
        //open landing page with login and signup options
        if([self.delegate respondsToSelector:@selector(redirectToPage:)])
            [self.delegate redirectToPage:@"LandingPageWithLoginSignup"];
    }
}

- (void)checkLoginCriteria
{
    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
    if([userDefaults valueForKey:kRefreshToken])
    {
        //refresh token available
        if([self isValidRefreshToken])
        {
            //refresh token valid
            if([self isValidAccessToken])
            {
                //access token valid
                [self checkProfileStatusAndFTL];
            }
            else
            {
                //get valid access token(and store all flag in userdefaults using refresh token then check profile status
                [self getAccessToken];
//                [self checkProfileStatusAndFTL];
            }
        }
        else
        {
            //open login page
            if([self.delegate respondsToSelector:@selector(redirectToPage:)])
                [self.delegate redirectToPage:@"Login"];
        }
    }
    else    //refresh token not available
    {
        //open login page
        if([self.delegate respondsToSelector:@selector(redirectToPage:)])
            [self.delegate redirectToPage:@"Login"];
    }
}

- (void)getAccessToken
{
    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
    // get access token first
    NSString *urlString = [NSString stringWithFormat:@"%@?client_id=%@&client_secret=%@&grant_type=%@&refresh_token=%@",[NSString stringWithFormat:@"%@%@",BASE_URL,REFRESHTOKENLOGINURL],kLoginServiceClientID,kLoginServiceClientSecret,kAccessTokenServiceGrantType,[userDefaults valueForKey:kDefaultsRefreshToken]];
    MSANetworkHandler *networkHanlder = [[MSANetworkHandler alloc] init];
    networkHanlder.delegate = self;
    [networkHanlder createRequestForURLString:urlString withIdentifier:@"AccessToken" andRequestParameters:nil inView:nil];
}

- (void)checkProfileStatusAndFTL
{
    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
    if(![[userDefaults valueForKey:@"PS"] isEqualToString:@"PC"])
    {
        if([userDefaults valueForKey:@"FTL"])
        {
            //open association
            if([self.delegate respondsToSelector:@selector(redirectToPage:)])
                [self.delegate redirectToPage:@"Association"];
        }
        else
        {
            //open country selection
            if([self.delegate respondsToSelector:@selector(redirectToPage:)])
                [self.delegate redirectToPage:@"CountrySelection"];
        }
    }
    else
    {
        //
    }
}

-(BOOL)isValidRefreshToken {
    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
    NSNumber *expireTimeInterval = [userDefaults valueForKey:kDefaultsRefreshTokenExpiresIn];
    NSDate *refeshTokenReceiveTime = [userDefaults valueForKey:kDefaultsRefreshTokenReceivedTime];
    
    NSDate *currentDateTime = [NSDate date];
    NSDate *newDate = [refeshTokenReceiveTime dateByAddingTimeInterval:[expireTimeInterval doubleValue]];
    if ([currentDateTime compare:newDate]== NSOrderedAscending) {
        // Not Expired
        return YES;
    }
    return NO;
}

-(BOOL)isValidAccessToken {
    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
    NSNumber *expireTimeInterval = [userDefaults valueForKey:kDefaultsAccessTokenExpiresIn];
    NSDate *accessTokenReceiveTime = [userDefaults valueForKey:kDefaultsAccessTokenReceivedTime];
    
    NSDate *currentDateTime = [NSDate date];
    NSDate *newDate = [accessTokenReceiveTime dateByAddingTimeInterval:[expireTimeInterval doubleValue]];
    if ([currentDateTime compare:newDate]== NSOrderedAscending) {
        // Not Expired
        return NO;
    }
    return NO;
}

#pragma mark - MSANetworkDelegate

- (void)didReceiveData:(NSData *)responseData forRequest:(NSString *)requestId
{
    //received response comes here
    NSError* err;
    NSDictionary *responseDict = [NSJSONSerialization JSONObjectWithData:responseData options:0 error:&err];
    
    NSLog(@"%@",responseDict);
    if ([requestId isEqualToString:@"AccessToken"]) {
        NSString * refreshToken = [responseDict objectForKey:kRefreshToken];
        NSString * accessToken = [responseDict objectForKey:kAccessToken];
        NSString * expiresIn = [responseDict objectForKey:kAccessTokenExpiresIn];
        NSString * accessTokenType = [responseDict objectForKey:kAccessTokenType];
        NSString * scope = [responseDict objectForKey:kLoginScope];
        NSString * userRole = [responseDict objectForKey:kUserRole];
        NSString * profileStatus = [responseDict objectForKey:kProfileStatus];
        NSArray * countryList = [responseDict objectForKey:kCountryList];
        NSString * firstTimeLogin = [responseDict objectForKey:kFirstTimeLogin];
        NSString * appVersion = [responseDict objectForKey:kAppVersion];

        NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
        [userDefaults setValue:refreshToken forKey:kDefaultsRefreshToken];
        [userDefaults setValue:accessToken forKey:kDefaultsAccessToken];
        [userDefaults setValue:[NSNumber numberWithInteger:[expiresIn integerValue]] forKey:kDefaultsAccessTokenExpiresIn];
        [userDefaults setValue:accessTokenType forKey:kDefaultsAccessTokenType];
        [userDefaults setValue:[NSDate date] forKey:kDefaultsAccessTokenReceivedTime];
        [userDefaults setValue:scope forKey:kDefaultsLoginScope];
        [userDefaults setValue:userRole forKey:kDefaultsUserRole];
        [userDefaults setValue:countryList forKey:kDefaultsCountryList];
        [userDefaults setValue:profileStatus forKey:kDefaultsProfileStatus];
        [userDefaults setValue:firstTimeLogin forKey:kDefaultsFirstTimeLogin];
        [userDefaults setValue:appVersion forKey:kDefaultsAppVersion];
        
        [userDefaults synchronize];
        
        [self checkProfileStatusAndFTL];
    }
    

}

- (void)didFailWithError:(NSError *)error forRequest:(NSString *)requestId
{
    
}

@end
