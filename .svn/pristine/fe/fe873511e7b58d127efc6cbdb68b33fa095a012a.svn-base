//
//  MSAComparePlanViewController.m
//  MySchapp
//
//  Created by CK-Dev on 3/11/16.
//  Copyright Â© 2016 ACA. All rights reserved.
//

#import "MSAComparePlanViewController.h"
#import "MSAComparePlanTableViewCell.h"

@interface MSAComparePlanViewController ()
{
    NSInteger plan1Index;
    NSInteger plan2Index;
    NSArray *features;
    UIPickerView *pickerView1;
    UIPickerView *pickerView2;
    UIToolbar *toolBar;
    NSInteger selectedIndex;
}
@end

@implementation MSAComparePlanViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    plan1Index = 0;
    plan2Index = 1;
    self.featureList.dataSource = self;
    self.featureList.delegate = self;
    [self.plan1 setTitle:[[self.plansAvailable objectAtIndex:plan1Index] valueForKey:@"planname"] forState:UIControlStateNormal];
    [self.plan2 setTitle:[[self.plansAvailable objectAtIndex:plan2Index] valueForKey:@"planname"] forState:UIControlStateNormal];
    features = [[self.plansAvailable objectAtIndex:plan1Index] valueForKey:@"features"];
    
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - IBAction

- (void)selectPlan1:(id)sender
{
    if(pickerView1) {
        [pickerView1 removeFromSuperview];
        pickerView1 = nil;
    }
    if(pickerView2) {
        [pickerView2 removeFromSuperview];
        pickerView2 = nil;
    }
    if(toolBar) {
        [toolBar removeFromSuperview];
        toolBar = nil;
    }
    toolBar = [[UIToolbar alloc] initWithFrame:CGRectMake(0, self.view.frame.size.height-150-44, self.view.frame.size.width, 44)];
    toolBar.barStyle = UIBarStyleBlackOpaque;
    UIBarButtonItem *doneButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemDone target:self action:@selector(doneTouched:)];
    UIBarButtonItem *cancelButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemCancel target:self action:@selector(cancelTouched:)];
    
    // the middle button is to make the Done button align to right
    [toolBar setItems:[NSArray arrayWithObjects:cancelButton, [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil], doneButton, nil]];
    [self.view addSubview:toolBar];
    pickerView1 = [[UIPickerView alloc] initWithFrame:CGRectMake(0,self.view.frame.size.height-150,self.view.frame.size.width,150)];
    pickerView1.delegate = self;
    pickerView1.dataSource = self;
    pickerView1.showsSelectionIndicator = YES;
    pickerView1.backgroundColor = [UIColor blueColor];
    [self.view addSubview:pickerView1];
}

- (void)selectPlan2:(id)sender
{
    if(pickerView1) {
        [pickerView1 removeFromSuperview];
        pickerView1 = nil;
    }
    if(pickerView2) {
        [pickerView2 removeFromSuperview];
        pickerView2 = nil;
    }
    if(toolBar) {
        [toolBar removeFromSuperview];
        toolBar = nil;
    }
    toolBar = [[UIToolbar alloc] initWithFrame:CGRectMake(0, self.view.frame.size.height-150-44, self.view.frame.size.width, 44)];
    toolBar.barStyle = UIBarStyleBlackOpaque;
    UIBarButtonItem *doneButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemDone target:self action:@selector(doneTouched:)];
    UIBarButtonItem *cancelButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemCancel target:self action:@selector(cancelTouched:)];
    // the middle button is to make the Done button align to right
    [toolBar setItems:[NSArray arrayWithObjects:cancelButton, [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil], doneButton, nil]];
    [self.view addSubview:toolBar];
    pickerView2 = [[UIPickerView alloc] initWithFrame:CGRectMake(0,self.view.frame.size.height-150,self.view.frame.size.width,150)];
    pickerView2.delegate = self;
    pickerView2.dataSource = self;
    pickerView2.showsSelectionIndicator = YES;
    pickerView2.backgroundColor = [UIColor blueColor];
    [self.view addSubview:pickerView2];
}

- (void)cancelTouched:(UIBarButtonItem *)sender
{
    if(pickerView1)
    {
        [pickerView1 removeFromSuperview];
        pickerView1 = nil;
    }
    if(pickerView2)
    {
        [pickerView2 removeFromSuperview];
        pickerView2 = nil;
    }
    if(toolBar)
    {
        [toolBar removeFromSuperview];
        toolBar = nil;
    }
}

- (void)doneTouched:(UIBarButtonItem *)sender
{
    if(pickerView1)
    {
        plan1Index = selectedIndex;
        [self.plan1 setTitle:[[self.plansAvailable objectAtIndex:plan1Index] valueForKey:@"planname"] forState:UIControlStateNormal];
        [pickerView1 removeFromSuperview];
        pickerView1 = nil;
    }
    if(pickerView2)
    {
        plan2Index = selectedIndex;
        [self.plan2 setTitle:[[self.plansAvailable objectAtIndex:plan2Index] valueForKey:@"planname"] forState:UIControlStateNormal];
        [pickerView2 removeFromSuperview];
        pickerView2 = nil;
    }
    if(toolBar)
    {
        [toolBar removeFromSuperview];
        toolBar = nil;
    }
    [self.featureList reloadData];
}

#pragma mark - UIPickerViewDatasource

-(NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView
{
    return 1;
}

- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component
{
    return self.plansAvailable.count;
}

- (NSString *)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component
{
    return [[self.plansAvailable objectAtIndex:row] valueForKey:@"planname"];
}

#pragma mark - UIPickerViewDelegate

- (void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component
{
    selectedIndex = row;
}

#pragma mark TableView Delegates

-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    return 60;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return [features count];
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    static NSString *CellIdentifier = @"MSAComparePlanTableViewCell";
    
    MSAComparePlanTableViewCell *cell = (MSAComparePlanTableViewCell*)[tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil) {
        cell = (MSAComparePlanTableViewCell *) [[[NSBundle mainBundle] loadNibNamed:@"MSAComparePlanTableViewCell" owner:self options:nil] objectAtIndex:0];
        cell.selectionStyle = UITableViewCellSelectionStyleNone;
    }
    
    cell.feature.text = [[features objectAtIndex:indexPath.row] valueForKey:@"description"];
    id value1 = [[[[self.plansAvailable objectAtIndex:plan1Index] valueForKey:@"features"] objectAtIndex:indexPath.row] valueForKey:@"value"];
    id value2 = [[[[self.plansAvailable objectAtIndex:plan2Index] valueForKey:@"features"] objectAtIndex:indexPath.row] valueForKey:@"value"];
    if([value1 isEqualToString:@"YES"])
    {
        UIImageView *availabilityInPlan1 = [[UIImageView alloc] init];
        availabilityInPlan1.image = [UIImage imageNamed:@"tickGreen.png"];
        [cell.plan1 addSubview:availabilityInPlan1];
        availabilityInPlan1.translatesAutoresizingMaskIntoConstraints = NO;
        [cell.plan1 addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|[avlPlan1]|" options:0 metrics:nil views:@{@"avlPlan1":availabilityInPlan1}]];
        [cell.plan1 addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:|[avlPlan1]|" options:0 metrics:nil views:@{@"avlPlan1":availabilityInPlan1}]];
    }
    else if ([value1 isEqualToString:@"NO"])
    {
        UIImageView *availabilityInPlan1 = [[UIImageView alloc] init];
        availabilityInPlan1.image = [UIImage imageNamed:@"cross.png"];
        [cell.plan1 addSubview:availabilityInPlan1];
        availabilityInPlan1.translatesAutoresizingMaskIntoConstraints = NO;
        [cell.plan1 addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|[avlPlan1]|" options:0 metrics:nil views:@{@"avlPlan1":availabilityInPlan1}]];
        [cell.plan1 addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:|[avlPlan1]|" options:0 metrics:nil views:@{@"avlPlan1":availabilityInPlan1}]];
    }
    else
    {
        UILabel *plan1Value = [[UILabel alloc] init];
        plan1Value.text = value1;
        plan1Value.translatesAutoresizingMaskIntoConstraints = NO;
        [cell.plan1 addSubview:plan1Value];
        [cell.plan1 addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|[avlPlan1]|" options:0 metrics:nil views:@{@"avlPlan1":plan1Value}]];
        [cell.plan1 addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:|[avlPlan1]|" options:0 metrics:nil views:@{@"avlPlan1":plan1Value}]];
    }
    
    if([value2 isEqualToString:@"YES"])
    {
        UIImageView *availabilityInPlan2 = [[UIImageView alloc] init];
        availabilityInPlan2.image = [UIImage imageNamed:@"tickGreen.png"];
        [cell.plan2 addSubview:availabilityInPlan2];
        availabilityInPlan2.translatesAutoresizingMaskIntoConstraints = NO;
        [cell.plan2 addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|[avlPlan1]|" options:0 metrics:nil views:@{@"avlPlan1":availabilityInPlan2}]];
        [cell.plan2 addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:|[avlPlan1]|" options:0 metrics:nil views:@{@"avlPlan1":availabilityInPlan2}]];
    }
    else if ([value2 isEqualToString:@"NO"])
    {
        UIImageView *availabilityInPlan2 = [[UIImageView alloc] init];
        availabilityInPlan2.image = [UIImage imageNamed:@"cross.png"];
        [cell.plan2 addSubview:availabilityInPlan2];
        availabilityInPlan2.translatesAutoresizingMaskIntoConstraints = NO;
        [cell.plan2 addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|[avlPlan1]|" options:0 metrics:nil views:@{@"avlPlan1":availabilityInPlan2}]];
        [cell.plan2 addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:|[avlPlan1]|" options:0 metrics:nil views:@{@"avlPlan1":availabilityInPlan2}]];
    }
    else
    {
        UILabel *plan2Value = [[UILabel alloc] init];
        plan2Value.text = value2;
        plan2Value.translatesAutoresizingMaskIntoConstraints = NO;
        [cell.plan2 addSubview:plan2Value];
        [cell.plan2 addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"H:|[avlPlan1]|" options:0 metrics:nil views:@{@"avlPlan1":plan2Value}]];
        [cell.plan2 addConstraints:[NSLayoutConstraint constraintsWithVisualFormat:@"V:|[avlPlan1]|" options:0 metrics:nil views:@{@"avlPlan1":plan2Value}]];
    }
    
    return cell;
}

@end
